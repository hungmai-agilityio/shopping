"use strict";(self.webpackChunkshopping=self.webpackChunkshopping||[]).push([[8811],{"./node_modules/.pnpm/@tanstack+query-core@5.59.6/node_modules/@tanstack/query-core/build/modern/queryClient.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{E:()=>QueryClient});var utils=__webpack_require__("./node_modules/.pnpm/@tanstack+query-core@5.59.6/node_modules/@tanstack/query-core/build/modern/utils.js"),modern_query=__webpack_require__("./node_modules/.pnpm/@tanstack+query-core@5.59.6/node_modules/@tanstack/query-core/build/modern/query.js"),notifyManager=__webpack_require__("./node_modules/.pnpm/@tanstack+query-core@5.59.6/node_modules/@tanstack/query-core/build/modern/notifyManager.js"),subscribable=__webpack_require__("./node_modules/.pnpm/@tanstack+query-core@5.59.6/node_modules/@tanstack/query-core/build/modern/subscribable.js"),QueryCache=class extends subscribable.Q{constructor(config={}){super(),this.config=config,this.#queries=new Map}#queries;build(client,options,state){const queryKey=options.queryKey,queryHash=options.queryHash??(0,utils.F$)(queryKey,options);let query=this.get(queryHash);return query||(query=new modern_query.X({cache:this,queryKey,queryHash,options:client.defaultQueryOptions(options),state,defaultOptions:client.getQueryDefaults(queryKey)}),this.add(query)),query}add(query){this.#queries.has(query.queryHash)||(this.#queries.set(query.queryHash,query),this.notify({type:"added",query}))}remove(query){const queryInMap=this.#queries.get(query.queryHash);queryInMap&&(query.destroy(),queryInMap===query&&this.#queries.delete(query.queryHash),this.notify({type:"removed",query}))}clear(){notifyManager.j.batch((()=>{this.getAll().forEach((query=>{this.remove(query)}))}))}get(queryHash){return this.#queries.get(queryHash)}getAll(){return[...this.#queries.values()]}find(filters){const defaultedFilters={exact:!0,...filters};return this.getAll().find((query=>(0,utils.MK)(defaultedFilters,query)))}findAll(filters={}){const queries=this.getAll();return Object.keys(filters).length>0?queries.filter((query=>(0,utils.MK)(filters,query))):queries}notify(event){notifyManager.j.batch((()=>{this.listeners.forEach((listener=>{listener(event)}))}))}onFocus(){notifyManager.j.batch((()=>{this.getAll().forEach((query=>{query.onFocus()}))}))}onOnline(){notifyManager.j.batch((()=>{this.getAll().forEach((query=>{query.onOnline()}))}))}},removable=__webpack_require__("./node_modules/.pnpm/@tanstack+query-core@5.59.6/node_modules/@tanstack/query-core/build/modern/removable.js"),retryer=__webpack_require__("./node_modules/.pnpm/@tanstack+query-core@5.59.6/node_modules/@tanstack/query-core/build/modern/retryer.js"),Mutation=class extends removable.k{#observers;#mutationCache;#retryer;constructor(config){super(),this.mutationId=config.mutationId,this.#mutationCache=config.mutationCache,this.#observers=[],this.state=config.state||{context:void 0,data:void 0,error:null,failureCount:0,failureReason:null,isPaused:!1,status:"idle",variables:void 0,submittedAt:0},this.setOptions(config.options),this.scheduleGc()}setOptions(options){this.options=options,this.updateGcTime(this.options.gcTime)}get meta(){return this.options.meta}addObserver(observer){this.#observers.includes(observer)||(this.#observers.push(observer),this.clearGcTimeout(),this.#mutationCache.notify({type:"observerAdded",mutation:this,observer}))}removeObserver(observer){this.#observers=this.#observers.filter((x=>x!==observer)),this.scheduleGc(),this.#mutationCache.notify({type:"observerRemoved",mutation:this,observer})}optionalRemove(){this.#observers.length||("pending"===this.state.status?this.scheduleGc():this.#mutationCache.remove(this))}continue(){return this.#retryer?.continue()??this.execute(this.state.variables)}async execute(variables){this.#retryer=(0,retryer.II)({fn:()=>this.options.mutationFn?this.options.mutationFn(variables):Promise.reject(new Error("No mutationFn found")),onFail:(failureCount,error)=>{this.#dispatch({type:"failed",failureCount,error})},onPause:()=>{this.#dispatch({type:"pause"})},onContinue:()=>{this.#dispatch({type:"continue"})},retry:this.options.retry??0,retryDelay:this.options.retryDelay,networkMode:this.options.networkMode,canRun:()=>this.#mutationCache.canRun(this)});const restored="pending"===this.state.status,isPaused=!this.#retryer.canStart();try{if(!restored){this.#dispatch({type:"pending",variables,isPaused}),await(this.#mutationCache.config.onMutate?.(variables,this));const context=await(this.options.onMutate?.(variables));context!==this.state.context&&this.#dispatch({type:"pending",context,variables,isPaused})}const data=await this.#retryer.start();return await(this.#mutationCache.config.onSuccess?.(data,variables,this.state.context,this)),await(this.options.onSuccess?.(data,variables,this.state.context)),await(this.#mutationCache.config.onSettled?.(data,null,this.state.variables,this.state.context,this)),await(this.options.onSettled?.(data,null,variables,this.state.context)),this.#dispatch({type:"success",data}),data}catch(error){try{throw await(this.#mutationCache.config.onError?.(error,variables,this.state.context,this)),await(this.options.onError?.(error,variables,this.state.context)),await(this.#mutationCache.config.onSettled?.(void 0,error,this.state.variables,this.state.context,this)),await(this.options.onSettled?.(void 0,error,variables,this.state.context)),error}finally{this.#dispatch({type:"error",error})}}finally{this.#mutationCache.runNext(this)}}#dispatch(action){this.state=(state=>{switch(action.type){case"failed":return{...state,failureCount:action.failureCount,failureReason:action.error};case"pause":return{...state,isPaused:!0};case"continue":return{...state,isPaused:!1};case"pending":return{...state,context:action.context,data:void 0,failureCount:0,failureReason:null,error:null,isPaused:action.isPaused,status:"pending",variables:action.variables,submittedAt:Date.now()};case"success":return{...state,data:action.data,failureCount:0,failureReason:null,error:null,status:"success",isPaused:!1};case"error":return{...state,data:void 0,error:action.error,failureCount:state.failureCount+1,failureReason:action.error,isPaused:!1,status:"error"}}})(this.state),notifyManager.j.batch((()=>{this.#observers.forEach((observer=>{observer.onMutationUpdate(action)})),this.#mutationCache.notify({mutation:this,type:"updated",action})}))}};var MutationCache=class extends subscribable.Q{constructor(config={}){super(),this.config=config,this.#mutations=new Map,this.#mutationId=Date.now()}#mutations;#mutationId;build(client,options,state){const mutation=new Mutation({mutationCache:this,mutationId:++this.#mutationId,options:client.defaultMutationOptions(options),state});return this.add(mutation),mutation}add(mutation){const scope=scopeFor(mutation),mutations=this.#mutations.get(scope)??[];mutations.push(mutation),this.#mutations.set(scope,mutations),this.notify({type:"added",mutation})}remove(mutation){const scope=scopeFor(mutation);if(this.#mutations.has(scope)){const mutations=this.#mutations.get(scope)?.filter((x=>x!==mutation));mutations&&(0===mutations.length?this.#mutations.delete(scope):this.#mutations.set(scope,mutations))}this.notify({type:"removed",mutation})}canRun(mutation){const firstPendingMutation=this.#mutations.get(scopeFor(mutation))?.find((m=>"pending"===m.state.status));return!firstPendingMutation||firstPendingMutation===mutation}runNext(mutation){const foundMutation=this.#mutations.get(scopeFor(mutation))?.find((m=>m!==mutation&&m.state.isPaused));return foundMutation?.continue()??Promise.resolve()}clear(){notifyManager.j.batch((()=>{this.getAll().forEach((mutation=>{this.remove(mutation)}))}))}getAll(){return[...this.#mutations.values()].flat()}find(filters){const defaultedFilters={exact:!0,...filters};return this.getAll().find((mutation=>(0,utils.nJ)(defaultedFilters,mutation)))}findAll(filters={}){return this.getAll().filter((mutation=>(0,utils.nJ)(filters,mutation)))}notify(event){notifyManager.j.batch((()=>{this.listeners.forEach((listener=>{listener(event)}))}))}resumePausedMutations(){const pausedMutations=this.getAll().filter((x=>x.state.isPaused));return notifyManager.j.batch((()=>Promise.all(pausedMutations.map((mutation=>mutation.continue().catch(utils.lQ))))))}};function scopeFor(mutation){return mutation.options.scope?.id??String(mutation.mutationId)}var focusManager=__webpack_require__("./node_modules/.pnpm/@tanstack+query-core@5.59.6/node_modules/@tanstack/query-core/build/modern/focusManager.js"),onlineManager=__webpack_require__("./node_modules/.pnpm/@tanstack+query-core@5.59.6/node_modules/@tanstack/query-core/build/modern/onlineManager.js");function infiniteQueryBehavior(pages){return{onFetch:(context,query)=>{const options=context.options,direction=context.fetchOptions?.meta?.fetchMore?.direction,oldPages=context.state.data?.pages||[],oldPageParams=context.state.data?.pageParams||[];let result={pages:[],pageParams:[]},currentPage=0;const fetchFn=async()=>{let cancelled=!1;const queryFn=(0,utils.ZM)(context.options,context.fetchOptions),fetchPage=async(data,param,previous)=>{if(cancelled)return Promise.reject();if(null==param&&data.pages.length)return Promise.resolve(data);const queryFnContext={queryKey:context.queryKey,pageParam:param,direction:previous?"backward":"forward",meta:context.options.meta};var object;object=queryFnContext,Object.defineProperty(object,"signal",{enumerable:!0,get:()=>(context.signal.aborted?cancelled=!0:context.signal.addEventListener("abort",(()=>{cancelled=!0})),context.signal)});const page=await queryFn(queryFnContext),{maxPages}=context.options,addTo=previous?utils.ZZ:utils.y9;return{pages:addTo(data.pages,page,maxPages),pageParams:addTo(data.pageParams,param,maxPages)}};if(direction&&oldPages.length){const previous="backward"===direction,oldData={pages:oldPages,pageParams:oldPageParams},param=(previous?getPreviousPageParam:getNextPageParam)(options,oldData);result=await fetchPage(oldData,param,previous)}else{const remainingPages=pages??oldPages.length;do{const param=0===currentPage?oldPageParams[0]??options.initialPageParam:getNextPageParam(options,result);if(currentPage>0&&null==param)break;result=await fetchPage(result,param),currentPage++}while(currentPage<remainingPages)}return result};context.options.persister?context.fetchFn=()=>context.options.persister?.(fetchFn,{queryKey:context.queryKey,meta:context.options.meta,signal:context.signal},query):context.fetchFn=fetchFn}}}function getNextPageParam(options,{pages,pageParams}){const lastIndex=pages.length-1;return pages.length>0?options.getNextPageParam(pages[lastIndex],pages,pageParams[lastIndex],pageParams):void 0}function getPreviousPageParam(options,{pages,pageParams}){return pages.length>0?options.getPreviousPageParam?.(pages[0],pages,pageParams[0],pageParams):void 0}var QueryClient=class{#queryCache;#mutationCache;#defaultOptions;#queryDefaults;#mutationDefaults;#mountCount;#unsubscribeFocus;#unsubscribeOnline;constructor(config={}){this.#queryCache=config.queryCache||new QueryCache,this.#mutationCache=config.mutationCache||new MutationCache,this.#defaultOptions=config.defaultOptions||{},this.#queryDefaults=new Map,this.#mutationDefaults=new Map,this.#mountCount=0}mount(){this.#mountCount++,1===this.#mountCount&&(this.#unsubscribeFocus=focusManager.m.subscribe((async focused=>{focused&&(await this.resumePausedMutations(),this.#queryCache.onFocus())})),this.#unsubscribeOnline=onlineManager.t.subscribe((async online=>{online&&(await this.resumePausedMutations(),this.#queryCache.onOnline())})))}unmount(){this.#mountCount--,0===this.#mountCount&&(this.#unsubscribeFocus?.(),this.#unsubscribeFocus=void 0,this.#unsubscribeOnline?.(),this.#unsubscribeOnline=void 0)}isFetching(filters){return this.#queryCache.findAll({...filters,fetchStatus:"fetching"}).length}isMutating(filters){return this.#mutationCache.findAll({...filters,status:"pending"}).length}getQueryData(queryKey){const options=this.defaultQueryOptions({queryKey});return this.#queryCache.get(options.queryHash)?.state.data}ensureQueryData(options){const cachedData=this.getQueryData(options.queryKey);if(void 0===cachedData)return this.fetchQuery(options);{const defaultedOptions=this.defaultQueryOptions(options),query=this.#queryCache.build(this,defaultedOptions);return options.revalidateIfStale&&query.isStaleByTime((0,utils.d2)(defaultedOptions.staleTime,query))&&this.prefetchQuery(defaultedOptions),Promise.resolve(cachedData)}}getQueriesData(filters){return this.#queryCache.findAll(filters).map((({queryKey,state})=>[queryKey,state.data]))}setQueryData(queryKey,updater,options){const defaultedOptions=this.defaultQueryOptions({queryKey}),query=this.#queryCache.get(defaultedOptions.queryHash),prevData=query?.state.data,data=(0,utils.Zw)(updater,prevData);if(void 0!==data)return this.#queryCache.build(this,defaultedOptions).setData(data,{...options,manual:!0})}setQueriesData(filters,updater,options){return notifyManager.j.batch((()=>this.#queryCache.findAll(filters).map((({queryKey})=>[queryKey,this.setQueryData(queryKey,updater,options)]))))}getQueryState(queryKey){const options=this.defaultQueryOptions({queryKey});return this.#queryCache.get(options.queryHash)?.state}removeQueries(filters){const queryCache=this.#queryCache;notifyManager.j.batch((()=>{queryCache.findAll(filters).forEach((query=>{queryCache.remove(query)}))}))}resetQueries(filters,options){const queryCache=this.#queryCache,refetchFilters={type:"active",...filters};return notifyManager.j.batch((()=>(queryCache.findAll(filters).forEach((query=>{query.reset()})),this.refetchQueries(refetchFilters,options))))}cancelQueries(filters={},cancelOptions={}){const defaultedCancelOptions={revert:!0,...cancelOptions},promises=notifyManager.j.batch((()=>this.#queryCache.findAll(filters).map((query=>query.cancel(defaultedCancelOptions)))));return Promise.all(promises).then(utils.lQ).catch(utils.lQ)}invalidateQueries(filters={},options={}){return notifyManager.j.batch((()=>{if(this.#queryCache.findAll(filters).forEach((query=>{query.invalidate()})),"none"===filters.refetchType)return Promise.resolve();const refetchFilters={...filters,type:filters.refetchType??filters.type??"active"};return this.refetchQueries(refetchFilters,options)}))}refetchQueries(filters={},options){const fetchOptions={...options,cancelRefetch:options?.cancelRefetch??!0},promises=notifyManager.j.batch((()=>this.#queryCache.findAll(filters).filter((query=>!query.isDisabled())).map((query=>{let promise=query.fetch(void 0,fetchOptions);return fetchOptions.throwOnError||(promise=promise.catch(utils.lQ)),"paused"===query.state.fetchStatus?Promise.resolve():promise}))));return Promise.all(promises).then(utils.lQ)}fetchQuery(options){const defaultedOptions=this.defaultQueryOptions(options);void 0===defaultedOptions.retry&&(defaultedOptions.retry=!1);const query=this.#queryCache.build(this,defaultedOptions);return query.isStaleByTime((0,utils.d2)(defaultedOptions.staleTime,query))?query.fetch(defaultedOptions):Promise.resolve(query.state.data)}prefetchQuery(options){return this.fetchQuery(options).then(utils.lQ).catch(utils.lQ)}fetchInfiniteQuery(options){return options.behavior=infiniteQueryBehavior(options.pages),this.fetchQuery(options)}prefetchInfiniteQuery(options){return this.fetchInfiniteQuery(options).then(utils.lQ).catch(utils.lQ)}ensureInfiniteQueryData(options){return options.behavior=infiniteQueryBehavior(options.pages),this.ensureQueryData(options)}resumePausedMutations(){return onlineManager.t.isOnline()?this.#mutationCache.resumePausedMutations():Promise.resolve()}getQueryCache(){return this.#queryCache}getMutationCache(){return this.#mutationCache}getDefaultOptions(){return this.#defaultOptions}setDefaultOptions(options){this.#defaultOptions=options}setQueryDefaults(queryKey,options){this.#queryDefaults.set((0,utils.EN)(queryKey),{queryKey,defaultOptions:options})}getQueryDefaults(queryKey){const defaults=[...this.#queryDefaults.values()];let result={};return defaults.forEach((queryDefault=>{(0,utils.Cp)(queryKey,queryDefault.queryKey)&&(result={...result,...queryDefault.defaultOptions})})),result}setMutationDefaults(mutationKey,options){this.#mutationDefaults.set((0,utils.EN)(mutationKey),{mutationKey,defaultOptions:options})}getMutationDefaults(mutationKey){const defaults=[...this.#mutationDefaults.values()];let result={};return defaults.forEach((queryDefault=>{(0,utils.Cp)(mutationKey,queryDefault.mutationKey)&&(result={...result,...queryDefault.defaultOptions})})),result}defaultQueryOptions(options){if(options._defaulted)return options;const defaultedOptions={...this.#defaultOptions.queries,...this.getQueryDefaults(options.queryKey),...options,_defaulted:!0};return defaultedOptions.queryHash||(defaultedOptions.queryHash=(0,utils.F$)(defaultedOptions.queryKey,defaultedOptions)),void 0===defaultedOptions.refetchOnReconnect&&(defaultedOptions.refetchOnReconnect="always"!==defaultedOptions.networkMode),void 0===defaultedOptions.throwOnError&&(defaultedOptions.throwOnError=!!defaultedOptions.suspense),!defaultedOptions.networkMode&&defaultedOptions.persister&&(defaultedOptions.networkMode="offlineFirst"),!0!==defaultedOptions.enabled&&defaultedOptions.queryFn===utils.hT&&(defaultedOptions.enabled=!1),defaultedOptions}defaultMutationOptions(options){return options?._defaulted?options:{...this.#defaultOptions.mutations,...options?.mutationKey&&this.getMutationDefaults(options.mutationKey),...options,_defaulted:!0}}clear(){this.#queryCache.clear(),this.#mutationCache.clear()}}}}]);